{"version":3,"sources":["components/Header.js","components/GameCell.js","components/GameRow.js","components/GameBoard.js","components/MainContent.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","GameCell","props","colour","value","onClick","onCellClick","colIndex","row","rowIndex","col","GameRow","cells","map","cell","index","key","GameBoard","rows","gameState","board","MainContent","class","type","onNewGame","message","Footer","href","App","newGame","gameBoard","initBoard","setState","currentPlayer","gameOver","r","c","push","handleCellClick","state","player","victory","isVictory","draw","isDraw","hzWin","checkHorizontal","vWin","checkVertical","drWin","checkDiagonalRight","dlWin","checkDiagonalLeft","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aea3b052.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"justify-center\">\r\n            <div className=\"width-limit\">\r\n                <h1>Connect 4 React</h1>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\n// Render the individual game cell. \r\n// Colour class on the circle is set based on the cell's value in game state\r\nfunction GameCell(props) {\r\n    let colour = \"\";\r\n    switch (props.value) {\r\n        case 0: \r\n            colour = \"white\"\r\n            break\r\n        case 1:\r\n            colour = \"red\"\r\n            break\r\n        case 2:\r\n            colour = \"yellow\"\r\n            break\r\n        default:\r\n            colour = \"white\"\r\n    }\r\n    \r\n    /* onCellClick handler is passed down all the way from App. This way, we can maintain \r\n    the entire game state in one place. All other components simply render what they get via props */\r\n    return (\r\n        <td onClick={() => props.onCellClick(props.colIndex)}>\r\n            <div className=\"cell\" row={props.rowIndex} col={props.colIndex}>\r\n                <div className={`circle ${colour}`} >\r\n                </div>\r\n            </div>\r\n        </td> \r\n    )\r\n}\r\n\r\nexport default GameCell","import React from 'react'\r\nimport GameCell from './GameCell'\r\n\r\n// Get all cells present in this row and render them in a <tr> element\r\nfunction GameRow(props) {\r\n    const cells = props.row.map((cell, index) => {\r\n        return (\r\n            <GameCell key={index} rowIndex={props.rowIndex} colIndex={index} value={cell} onCellClick={props.onCellClick} />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <tr>{cells}</tr>\r\n    )\r\n}\r\n\r\nexport default GameRow","import React from 'react'\r\nimport GameRow from './GameRow'\r\n\r\n// Grab all rows of the game board and render them in a table\r\nfunction GameBoard(props) {\r\n    const rows = props.gameState.board.map((row, rowIndex) => {\r\n        return (\r\n            <GameRow key={rowIndex} rowIndex={rowIndex} row={row} onCellClick={props.onCellClick} />\r\n        )\r\n    })\r\n    \r\n    return (\r\n        <div className=\"game-board\">\r\n            <table>\r\n                <thead></thead>  \r\n                <tbody>{rows}</tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameBoard","import React from 'react'\r\nimport GameBoard from './GameBoard'\r\n\r\n// Render all content in the <main> tag, including the game board\r\nfunction MainContent(props) {\r\n    return (\r\n        <main className=\"justify-center\">\r\n            <div className=\"width-limit\">\r\n                <div class=\"info-area\">\r\n                    <button type=\"button\" onClick={() => props.onNewGame()}>New Game</button>\r\n                    <h1>{props.gameState.message}</h1>\r\n                </div>\r\n                <GameBoard gameState={props.gameState} onCellClick={props.onCellClick} />\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default MainContent","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"justify-center\">\r\n            <div className=\"width-limit\">\r\n                <span>Connect 4 React 2019 Â© Dominik Petrovic, CSS/visuals borrowed from <a href=\"https://codepen.io/jeffleu/pen/KgbZwj\">Jeff Leu</a> under the MIT license</span>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\n\nimport Header from './components/Header'\nimport MainContent from './components/MainContent';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper()\n\t\tconst gameBoard = this.initBoard()\n\n\t\t// 1 is red player\n\t\t// 2 is yellow player\n\t\tthis.state = {\n\t\t\tcurrentPlayer: 1, \n\t\t\tboard: gameBoard,\n\t\t\tgameOver: false,\n\t\t\tmessage: \"RED turn\"\n\t\t}\n\t}\n\n\tnewGame = () => {\n\t\tconst gameBoard = this.initBoard()\n\t\t\n\t\tthis.setState({\n\t\t\tcurrentPlayer: 1, \n\t\t\tboard: gameBoard,\n\t\t\tgameOver: false,\n\t\t\tmessage: \"RED turn\"\t\n\t\t})\n\t}\n\t\n\t// Create a new 6*7 array initialized with zeroes to represent the game board\n\t// 0 is neutral/empty\n\t// 1 is red\n\t// 2 is yellow\n\tinitBoard = () => {\n\t\tlet board = []\n\t\tfor(let r = 0; r < 6; r++) {\n\t\t\tlet row = []\n\t\t\tfor(let c = 0; c < 7; c++) {\n\t\t\t\trow.push(0)\n\t\t\t}\n\t\t\tboard.push(row)\n\t\t}\n\t\treturn board\n\t}\n\n\thandleCellClick = (col) => {\n\t\t// Game has already ended\n\t\tif(this.state.gameOver) return \n\t\t\n\t\t// Find the bottom-most cell that hasn't been filled\n\t\tlet row = 5\n\t\twhile(row > -1) {\n\t\t\tif(this.state.board[row][col] <= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t--row;\n\t\t}\n\n\t\t// All cells in column have been filled\n\t\tif(row <= -1) return \n\t\t\n\t\t// Mark clicked cell with current player's number\n\t\tconst player = this.state.currentPlayer\n\t\tlet gameBoard = this.state.board\n\t\tgameBoard[row][col] = player\n\n\t\t// Check victory conditions first, then draw conditions\n\t\tconst victory = this.isVictory(player)\n\t\tconst draw = this.isDraw()\n\n\t\t// Update game state\n\t\tthis.setState({\n\t\t\tboard: gameBoard,\n\t\t\tgameOver: victory ? true : draw,\n\t\t\tcurrentPlayer: player === 1 ? 2 : 1,\n\n\t\t\t/* Sets game status message. Checks for victory first, then draw.\n\t\t\tIf neither applies, it simply prints out whose turn it is. */\n\t\t\tmessage: victory ? \n\t\t\t\t(player === 1 ? \"RED Wins!\" : \"YELLOW Wins!\") : \n\t\t\t\tdraw ? \"DRAW!\" :\n\t\t\t\t(player === 1 ? \"YELLOW turn\" : \"RED turn\")\t\n\t\t})\n\t}\n\n\tisVictory = (player) => {\n\t\tconst hzWin = this.checkHorizontal(player)\n\t\tconst vWin = this.checkVertical(player)\n\t\tconst drWin = this.checkDiagonalRight(player)\n\t\tconst dlWin = this.checkDiagonalLeft(player)\n\n\t\tif(hzWin || vWin || drWin || dlWin) return true\n\t\telse return false\n\t}\n\n\tisDraw = () => {\n\t\tfor(let row = 0; row < 6; row++) {\n\t\t\tfor(let col = 0; col < 7; col++) {\n\t\t\t\tif(this.state.board[row][col] <= 0)\n\t\t\t\t\treturn false // There are neutral cells remaining\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tcheckHorizontal = (player) => {\n\t\tfor(let row = 0; row < 6; row++) {\n\t\t\tfor(let col = 0; col < 4; col++) {\n\t\t\t\tif(\n\t\t\t\t\tthis.state.board[row][col] === player &&\n\t\t\t\t\tthis.state.board[row][col+1] === player &&\t\n\t\t\t\t\tthis.state.board[row][col+2] === player &&\n\t\t\t\t\tthis.state.board[row][col+3] === player\n\t\t\t\t) \n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\t\n\t}\n\n\tcheckVertical = (player) => {\n\t\tfor(let col = 0; col < 7; col++) {\n\t\t\tfor(let row = 0; row < 3; row++) {\n\t\t\t\tif(\n\t\t\t\t\tthis.state.board[row][col] === player &&\n\t\t\t\t\tthis.state.board[row+1][col] === player &&\t\n\t\t\t\t\tthis.state.board[row+2][col] === player &&\n\t\t\t\t\tthis.state.board[row+3][col] === player\n\t\t\t\t) \n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\t\n\t}\n\n\tcheckDiagonalRight = (player) => {\n\t\tfor(let row = 0; row < 3; row++) {\n\t\t\tfor(let col = 0; col < 4; col++) {\n\t\t\t\tif(\n\t\t\t\t\tthis.state.board[row][col] === player &&\n\t\t\t\t\tthis.state.board[row+1][col+1] === player &&\t\n\t\t\t\t\tthis.state.board[row+2][col+2] === player &&\n\t\t\t\t\tthis.state.board[row+3][col+3] === player\n\t\t\t\t) \n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\t\n\t}\n\n\tcheckDiagonalLeft = (player) => {\n\t\tfor(let row = 0; row < 3; row++) {\n\t\t\tfor(let col = 6; col > 2; col--) {\n\t\t\t\tif(\n\t\t\t\t\tthis.state.board[row][col] === player &&\n\t\t\t\t\tthis.state.board[row+1][col-1] === player &&\t\n\t\t\t\t\tthis.state.board[row+2][col-2] === player &&\n\t\t\t\t\tthis.state.board[row+3][col-3] === player\n\t\t\t\t) \n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\t\n\t}\n\n \trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Header />\n\t\t\t\t<MainContent gameState={this.state} onNewGame={this.newGame} onCellClick={this.handleCellClick} />\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}